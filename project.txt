Doctor-Appointment-Booking-Appointment-System
create backend folder

step 1.server setup
npm init-y pachkage.json file create
1.setup project install packages express,mongoose,nodemon,cors,dotenv
2.app.js , .env and .gitignorefile create on root folder
3.src folder create
4.package.json folder  "type": "module" and script add
  "scripts": {
   "start":"nodemon app.js",
   "dev":"nodemon app.js"
  },
  5.setup is completed.


step 2.git add
1.git init
2.git add .
3.git commit -m "server setup is completed"

step 3.server create
1.create port number and mongoose url in .env file
2.create cluster for project
3.mongooge url me project ka folder name add karna
4.create folder structure inside src folder - config,controller,middleware,models,routes

step 4.Rest Api create
1.user schema created
2.register route create
3.login route create
4.register user ke password ko bcrypt se password ko hash kare
5.login user ke password ko bcrypt se password ko compare kare
6.password compare kene ke baad jwt.sing se token create kare
7.token ko cookie me set kare

step 5.Authorization moddleware banana
1.authMiddleware banana jisme hum token ko get gaet karenge
2.token ko Verify karenge jwt.Verify method se agartoken sahi hai next method ko call karenge
3.getuser ka route api banayenge jiske under user userid se validate karenge
4.authRouter ke getuser ka get request ke under authMiddleware ko pass karenge.


ЁЯФ╣ Authorization (рдкреНрд░рдорд╛рдгреАрдХрд░рдг) рдХреНрдпрд╛ рд╣реИ рдФрд░ рдХреНрдпреЛрдВ рдЬрд░реВрд░реА рд╣реИ?
Authorization рдХрд╛ рдорддрд▓рдм рд╣реЛрддрд╛ рд╣реИ User рдХреЗ рдЕрдзрд┐рдХрд╛рд░реЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░рдирд╛ тАУ рдпрд╛рдиреА рдпрд╣ рддрдп рдХрд░рдирд╛ рдХрд┐ рдХреМрди рд╕реА рдЬрд╛рдирдХрд╛рд░реА, рдбреЗрдЯрд╛, рдпрд╛ рд╕рд░реНрд╡рд┐рд╕ рдХреЛ рдХреМрди рдПрдХреНрд╕реЗрд╕ рдХрд░ рд╕рдХрддрд╛ рд╣реИред

ЁЯТб рдЙрджрд╛рд╣рд░рдг рд╕рдордЭреЛ:
рдорд╛рди рд▓реЛ рдХрд┐ рддреБрдо рдПрдХ Bank рдХреЗ Owner рд╣реЛ, рдФрд░ рддреБрдореНрд╣рд╛рд░реА Website рдореЗрдВ рддреАрди рддрд░рд╣ рдХреЗ рд▓реЛрдЧ рдЖрддреЗ рд╣реИрдВ:

Admin (рдмреИрдВрдХ рдореИрдиреЗрдЬрд░) тАУ рд╕рдм рдХреБрдЫ рджреЗрдЦ рд╕рдХрддрд╛ рд╣реИ
User (рдЧреНрд░рд╛рд╣рдХ) тАУ рдмрд╕ рдЕрдкрдиреЗ Account рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдЦ рд╕рдХрддрд╛ рд╣реИ
рдЕрдирдЬрд╛рди рд╡реНрдпрдХреНрддрд┐ тАУ рдХреЛрдИ рднреА рдбреЗрдЯрд╛ рдирд╣реАрдВ рджреЗрдЦ рд╕рдХрддрд╛
рдЕрдЧрд░ Authorization рдирд╣реАрдВ рд╣реЛрдЧрд╛, рддреЛ рдХреЛрдИ рднреА рдХрд┐рд╕реА рдХрд╛ рднреА рдмреИрдВрдХ рдмреИрд▓реЗрдВрд╕ рджреЗрдЦ рд╕рдХрддрд╛ рд╣реИ ЁЯШи
рдЗрд╕рд▓рд┐рдП рд╣рд░ API рдкрд░ Authorization рдЬрд░реВрд░реА рд╣реЛрддрд╛ рд╣реИ рддрд╛рдХрд┐ рд╕рд┐рд░реНрдл рд╕рд╣реА рд╡реНрдпрдХреНрддрд┐ рд╣реА рд╕рд╣реА рдбреЗрдЯрд╛ рдХреЛ рдПрдХреНрд╕реЗрд╕ рдХрд░ рд╕рдХреЗред

ЁЯФ╣ Authorization рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ? (Step by Step)
Authorization Token-Based Authentication рд╕реЗ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рдЬрд┐рд╕рдореЗрдВ JWT (JSON Web Token) рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реЛрддрд╛ рд╣реИред

ЁЯЪА Step 1: рдЬрдм User Login рдХрд░рддрд╛ рд╣реИ
рдЬрдм рдХреЛрдИ User Login рдХрд░рддрд╛ рд╣реИ, рддреЛ Backend рдЙрд╕рдХреА Email рдФрд░ Password рдХреЛ Database рдореЗрдВ Verify рдХрд░рддрд╛ рд╣реИ рдФрд░ рдПрдХ Token рдмрдирд╛рддрд╛ рд╣реИред
тЬФ рдЗрд╕рдореЗрдВ рд╣реЛрддрд╛ рдХреНрдпрд╛ рд╣реИ?
User рд╕рд╣реА рд╣реИ? тЖТ рдЕрдЧрд░ рд╣рд╛рдБ, рддреЛ рдПрдХ Token Generate рдХрд░реЛ
Token рдореЗрдВ User рдХрд╛ id рдбрд╛рд▓рд╛ рдЬрд╛рддрд╛ рд╣реИ
Token рдХреЛ Client (Frontend) рдореЗрдВ рднреЗрдЬ рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ
ЁЯЪА Step 2: Frontend Token рдХреЛ LocalStorage рдореЗрдВ Save рдХрд░рддрд╛ рд╣реИ
рдЕрдм Login рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж, React App рдореЗрдВ рд╣рдо рдЗрд╕ Token рдХреЛ LocalStorage рдореЗрдВ Save рдХрд░ рд▓реЗрддреЗ рд╣реИрдВ:
ЁЯФ╣ рдЕрдм рдпрд╣ Token рд╣рд░ API Request рдореЗрдВ рднреЗрдЬрд╛ рдЬрд╛рдПрдЧрд╛ рддрд╛рдХрд┐ Backend рдХреЛ рдкрддрд╛ рдЪрд▓реЗ рдХрд┐ рдпрд╣ Authorized User рд╣реИред
ЁЯЪА Step 3: рдЬрдм User API Call рдХрд░рддрд╛ рд╣реИ рддреЛ Token Send рдХрд░рддрд╛ рд╣реИ
рдЕрдм рдЬрдм User рдХрд┐рд╕реА Secure API рдХреЛ Call рдХрд░реЗрдЧрд╛, рддреЛ рдЙрд╕реЗ Header рдореЗрдВ Authorization Token рднреЗрдЬрдирд╛ рдкрдбрд╝реЗрдЧрд╛:
тЬФ рдЗрд╕рдореЗрдВ рдХреНрдпрд╛ рд╣реБрдЖ?
Request рднреЗрдЬрддреЗ рд╕рдордп Token Header рдореЗрдВ рднреЗрдЬрд╛ рдЧрдпрд╛
рдЕрдм Backend рдЪреЗрдХ рдХрд░реЗрдЧрд╛ рдХрд┐ рдпрд╣ Valid Token рд╣реИ рдпрд╛ рдирд╣реАрдВ
ЁЯЪА Step 4: Backend Token рдХреЛ Verify рдХрд░реЗрдЧрд╛
рдЕрдм Backend рдореЗрдВ Middleware (authMiddleware.js) рдпрд╣ Verify рдХрд░реЗрдЧрд╛ рдХрд┐ Token рд╕рд╣реА рд╣реИ рдпрд╛ рдирд╣реАрдВ:
тЬФ рдЗрд╕рдореЗрдВ рдХреНрдпрд╛ рд╣реБрдЖ?

Token Header рд╕реЗ рдирд┐рдХрд╛рд▓рд╛
рдЕрдЧрд░ Token рдирд╣реАрдВ рд╣реИ тЖТ 401 Unauthorized Error рднреЗрдЬ рджрд┐рдпрд╛
Token рдХреЛ Verify рдХрд┐рдпрд╛
рдЕрдЧрд░ рд╕рд╣реА рд╣реИ, рддреЛ User рдХреА ID рдХреЛ Request рдореЗрдВ Set рдХрд┐рдпрд╛ рдФрд░ API рдХреЛ рдЖрдЧреЗ рднреЗрдЬ рджрд┐рдпрд╛

ЁЯФ╣ Authorization рд╕реЗ рдХреНрдпрд╛ рдлрд╝рд╛рдпрджрд╛ рд╣реИ?
тЬЕ Secure API Calls тАУ рдХреЛрдИ рднреА рдЕрдирдЬрд╛рди рд╡реНрдпрдХреНрддрд┐ Data Access рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛
тЬЕ Role-Based Access тАУ Admin рдФрд░ User рдЕрд▓рдЧ-рдЕрд▓рдЧ рдЪреАрдЬрд╝реЗрдВ рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВ
тЬЕ Token-Based System тАУ User рдХреЛ рдмрд╛рд░-рдмрд╛рд░ Login рдХрд░рдиреЗ рдХреА рдЬрд░реВрд░рдд рдирд╣реАрдВ рдкрдбрд╝рддреА


step 6.logout api route create karna
1.logout route ke under hum cookie ko clear kar denge jisme hum httpOnly ,secure or sameSite attribute use karenge


setp 7.agar user model ka schema hum dekhe to yaha per koi object nahi banaya jis se pata chal sake admin hai ya phir doctor hai.
1.user model ke under hum admin or doctor ka object banayenge jisse pata chal sake jis ne login kiya wo admin hai ya doctor hai
2.hum ne isAdmin , isDoctor , notification or seennotification ka object banaya hai
3.database ke under jitne existing user hai unko delete kar denge.
4.admin ke naam se new register karenge. or new user bhi register karenge kyu ki dono seprate menu frontend me show karne hai.
5.get user api hai uske user.password ko undefiend karenge kyu ki humko frontend me  user ka password show  nahi karna hai.

step 8.apply doctor
1.doctor ka  schema create karenge model ke under 
2.jis ke under personal or profressional details get karenge.
3.personal info fields = firstname , lastname ,phone ,email , website or address
4.professional info fields = specialization, experince,feesPerConsultation,timing

step 9.apply doctor ka routes create karenge.
breakdown the code
рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ рдпрд╣ рдХрдВрдЯреНрд░реЛрд▓рд░? рдЬрдм рдХреЛрдИ рдпреВрдЬрд╝рд░ рдбреЙрдХреНрдЯрд░ рдЕрдХрд╛рдЙрдВрдЯ рдХреЗ рд▓рд┐рдП рдЕрдкреНрд▓рд╛рдИ рдХрд░рддрд╛ рд╣реИ, рддрдм рдпрд╣ рдХрдВрдЯреНрд░реЛрд▓рд░:
рдЙрд╕рдХрд╛ рдбреЗрдЯрд╛ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рд╕реЗрд╡ рдХрд░рддрд╛ рд╣реИред
рдПрдбрдорд┐рди рдХреЛ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рднреЗрдЬрддрд╛ рд╣реИ рдХрд┐ рдПрдХ рдирдпрд╛ рдбреЙрдХреНрдЯрд░ рдЕрдкреНрд▓рд╛рдИ рдХрд┐рдпрд╛ рд╣реИред
рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдореЗрдВ рдХрдиреНрдлрд░реНрдореЗрд╢рди рджреЗрддрд╛ рд╣реИ рдХрд┐ рдЕрдкреНрд▓рд┐рдХреЗрд╢рди рд╕рдХреНрд╕реЗрд╕рдлреБрд▓реА рд╣реЛ рдЧрдИред
1.get doctor information from req.body
2.create new doctor object and save into database
3.new doctorModel({...req.body, status: "pending"}) this data save into doctorModel
4.status: "pending" рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ рдЕрднреА рдПрдбрдорд┐рди рдЕрдкреНрд░реВрд╡ рдХрд░реЗрдЧрд╛ред
5.рдПрдбрдорд┐рди рдХреЛ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рднреЗрдЬрдирд╛ 
const adminUser = await userModel.findOne({ isAdmin: true });
рдпрд╣ рдбрд╛рдЯрд╛рдмреЗрд╕ рдореЗрдВ рдРрд╕реЗ рдпреВрдЬрд╝рд░ рдХреЛ рдЦреЛрдЬрддреА рд╣реИ, рдЬрд┐рд╕рдХрд╛ isAdmin: true рд╣реЛ, рдпрд╛рдиреА рдЬреЛ рдПрдбрдорд┐рди рд╣реЛред
рдЕрдЧрд░ рдбрд╛рдЯрд╛рдмреЗрд╕ рдореЗрдВ рдХреЛрдИ рдРрдбрдорд┐рди рдорд┐рд▓рд╛, рддреЛ рдЙрд╕рдХрд╛ рдбреЗрдЯрд╛ adminUser рдирд╛рдо рдХреЗ рд╡реЗрд░рд┐рдПрдмрд▓ рдореЗрдВ рд╕реНрдЯреЛрд░ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред
const notification = adminUser.notification;
рдлрд┐рд░ рдЙрд╕рдХреЗ рдкреБрд░рд╛рдиреЗ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдХреЛ рд▓реЗ рд░рд╣реЗ рд╣реИрдВред
рдЕрдм рд╣рдо рдирдП рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдЬреЛрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ рдЙрд╕реЗ рдЕрдкрдбреЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
6. рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд░рдирд╛
notification.push(...) рдХреНрдпрд╛ рдХрд░ рд░рд╣рд╛ рд╣реИ?
рд╣рдордиреЗ рдкрд┐рдЫрд▓реЗ рд╕реНрдЯреЗрдк рдореЗрдВ рдПрдбрдорд┐рди рдХрд╛ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рд▓рд┐рд╕реНрдЯ (notification) рд▓рд┐рдпрд╛ рдерд╛ред
рдЕрдм рд╣рдо рдЙрд╕рдореЗрдВ рдПрдХ рдирдпрд╛ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдЬреЛрдбрд╝ рд░рд╣реЗ рд╣реИрдВред
type: "apply-doctor-request" => рдпрд╣ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдХрд╛ рдЯрд╛рдЗрдк рдмрддрд╛ рд░рд╣рд╛ рд╣реИ рдХрд┐ рдпрд╣ рдбреЙрдХреНрдЯрд░ рдХреА рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рд╕реЗ рдЬреБрдбрд╝рд╛ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рд╣реИред
message: "${newDoctor.firstName} ${newDoctor.lastName} has applied for doctor account"
doctorId: рдирдП рдбреЙрдХреНрдЯрд░ рдХреА ID, рдЬрд┐рд╕рд╕реЗ рдЙрд╕реЗ рдбрд╛рдЯрд╛рдмреЗрд╕ рдореЗрдВ рдкрд╣рдЪрд╛рдирд╛ рдЬрд╛ рд╕рдХреЗред
name: рдбреЙрдХреНрдЯрд░ рдХрд╛ рдкреВрд░рд╛ рдирд╛рдоред
onClickPath: рдЕрдЧрд░ рдПрдбрдорд┐рди рдЗрд╕ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗ, рддреЛ "/getuser" рдкреЗрдЬ рдЦреБрд▓реЗрдЧрд╛, рдЬрд┐рд╕рд╕реЗ рд╡рд╣ рдбреЙрдХреНрдЯрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдЦ рд╕рдХреЗред
ЁЯТб рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ рдкреВрд░рд╛ рдкреНрд░реЛрд╕реЗрд╕:
1я╕ПтГг рдЬрдм рдХреЛрдИ рдирдпрд╛ рдбреЙрдХреНрдЯрд░ рдЖрд╡реЗрджрди рдХрд░рддрд╛ рд╣реИ, рддреЛ рдЙрд╕рдХрд╛ рдбреЗрдЯрд╛ newDoctor рдореЗрдВ рд╕реНрдЯреЛрд░ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред
2я╕ПтГг рдПрдбрдорд┐рди рдХреА рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рд▓рд┐рд╕реНрдЯ (notification) рдореЗрдВ рдПрдХ рдирдпрд╛ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдЬреЛрдбрд╝рд╛ рдЬрд╛рддрд╛ рд╣реИред
3я╕ПтГг рдЗрд╕рдореЗрдВ рд▓рд┐рдЦрд╛ рд╣реЛрддрд╛ рд╣реИ рдХрд┐ "рдХреМрди рдбреЙрдХреНрдЯрд░ рдЕрдкреНрд▓рд╛рдИ рдХрд░ рд░рд╣рд╛ рд╣реИ" рдФрд░ "рдПрдбрдорд┐рди рдХреЛ рдХрд╣рд╛рдБ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП"ред
4я╕ПтГг рдЬрдм рдПрдбрдорд┐рди рдЗрд╕ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдЧрд╛, рддреЛ рд╡рд╣ /getuser рдкреЗрдЬ рдкрд░ рдЬрд╛рдПрдЧрд╛, рдЬрд╣рд╛рдБ рд╡рд╣ рдбреЙрдХреНрдЯрд░ рдХреА рдбрд┐рдЯреЗрд▓реНрд╕ рджреЗрдЦ рд╕рдХрддрд╛ рд╣реИред

тЮбя╕П рдорддрд▓рдм, рдпрд╣ рдХреЛрдб рдПрдбрдорд┐рди рдХреЛ рдСрдЯреЛрдореИрдЯрд┐рдХрд▓реА рдбреЙрдХреНрдЯрд░ рдХреА рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рднреЗрдЬрддрд╛ рд╣реИ! ЁЯШК
7.рдЕрдкрдбреЗрдЯреЗрдб рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдПрдбрдорд┐рди рдХреЗ рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рд╕реЗрд╡ рдХрд░рдирд╛
await userModel.findByIdAndUpdate(adminUser._id, { notification });
findByIdAndUpdate(adminUser._id, { notification })
рдпрд╣ рдПрдбрдорд┐рди рдХреЗ рдпреВрдЬрд╝рд░ рдбреЗрдЯрд╛ рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд░рддрд╛ рд╣реИ рддрд╛рдХрд┐ рдирдП рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рд╕реЗрд╡ рд╣реЛ рдЬрд╛рдПрдБред
8.рд╕рдХреНрд╕реЗрд╕ рдореИрд╕реЗрдЬ рднреЗрдЬрдирд╛ 
res.status(201).json({...})
рдпрд╣ рдХреНрд▓рд╛рдЗрдВрдЯ (рдлреНрд░рдВрдЯрдПрдВрдб) рдХреЛ рдХрдиреНрдлрд░реНрдореЗрд╢рди рджреЗрддрд╛ рд╣реИ рдХрд┐ рдбреЙрдХреНрдЯрд░ рдЕрдХрд╛рдЙрдВрдЯ рдЕрдкреНрд▓рд╛рдИ рд╣реЛ рдЧрдпрд╛ред