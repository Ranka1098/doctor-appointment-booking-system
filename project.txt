Doctor-Appointment-Booking-Appointment-System
create backend folder

step 1.server setup
npm init-y pachkage.json file create
1.setup project install packages express,mongoose,nodemon,cors,dotenv
2.app.js , .env and .gitignorefile create on root folder
3.src folder create
4.package.json folder  "type": "module" and script add
  "scripts": {
   "start":"nodemon app.js",
   "dev":"nodemon app.js"
  },
  5.setup is completed.


step 2.git add
1.git init
2.git add .
3.git commit -m "server setup is completed"

step 3.server create
1.create port number and mongoose url in .env file
2.create cluster for project
3.mongooge url me project ka folder name add karna
4.create folder structure inside src folder - config,controller,middleware,models,routes

step 4.Rest Api create
1.user schema created
2.register route create
3.login route create
4.register user ke password ko bcrypt se password ko hash kare
5.login user ke password ko bcrypt se password ko compare kare
6.password compare kene ke baad jwt.sing se token create kare
7.token ko cookie me set kare

step 5.Authorization moddleware banana
1.authMiddleware banana jisme hum token ko get gaet karenge
2.token ko Verify karenge jwt.Verify method se agartoken sahi hai next method ko call karenge
3.getuser ka route api banayenge jiske under user userid se validate karenge
4.authRouter ke getuser ka get request ke under authMiddleware ko pass karenge.


üîπ Authorization (‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£) ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à?
Authorization ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•ã‡§§‡§æ ‡§π‡•à User ‡§ï‡•á ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡§®‡§æ ‚Äì ‡§Ø‡§æ‡§®‡•Ä ‡§Ø‡§π ‡§§‡§Ø ‡§ï‡§∞‡§®‡§æ ‡§ï‡§ø ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä, ‡§°‡•á‡§ü‡§æ, ‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏ ‡§ï‡•ã ‡§ï‡•å‡§® ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

üí° ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§∏‡§Æ‡§ù‡•ã:
‡§Æ‡§æ‡§® ‡§≤‡•ã ‡§ï‡§ø ‡§§‡•Å‡§Æ ‡§è‡§ï Bank ‡§ï‡•á Owner ‡§π‡•ã, ‡§î‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•Ä Website ‡§Æ‡•á‡§Ç ‡§§‡•Ä‡§® ‡§§‡§∞‡§π ‡§ï‡•á ‡§≤‡•ã‡§ó ‡§Ü‡§§‡•á ‡§π‡•à‡§Ç:

Admin (‡§¨‡•à‡§Ç‡§ï ‡§Æ‡•à‡§®‡•á‡§ú‡§∞) ‚Äì ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
User (‡§ó‡•ç‡§∞‡§æ‡§π‡§ï) ‚Äì ‡§¨‡§∏ ‡§Ö‡§™‡§®‡•á Account ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
‡§Ö‡§®‡§ú‡§æ‡§® ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‚Äì ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§°‡•á‡§ü‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡§æ
‡§Ö‡§ó‡§∞ Authorization ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ, ‡§§‡•ã ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡§æ ‡§≠‡•Ä ‡§¨‡•à‡§Ç‡§ï ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à üò®
‡§á‡§∏‡§≤‡§ø‡§è ‡§π‡§∞ API ‡§™‡§∞ Authorization ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§§‡§æ‡§ï‡§ø ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§∏‡§π‡•Ä ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§π‡•Ä ‡§∏‡§π‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞ ‡§∏‡§ï‡•á‡•§

üîπ Authorization ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à? (Step by Step)
Authorization Token-Based Authentication ‡§∏‡•á ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç JWT (JSON Web Token) ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

üöÄ Step 1: ‡§ú‡§¨ User Login ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
‡§ú‡§¨ ‡§ï‡•ã‡§à User Login ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§§‡•ã Backend ‡§â‡§∏‡§ï‡•Ä Email ‡§î‡§∞ Password ‡§ï‡•ã Database ‡§Æ‡•á‡§Ç Verify ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§è‡§ï Token ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§
‚úî ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?
User ‡§∏‡§π‡•Ä ‡§π‡•à? ‚Üí ‡§Ö‡§ó‡§∞ ‡§π‡§æ‡§Å, ‡§§‡•ã ‡§è‡§ï Token Generate ‡§ï‡§∞‡•ã
Token ‡§Æ‡•á‡§Ç User ‡§ï‡§æ id ‡§°‡§æ‡§≤‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à
Token ‡§ï‡•ã Client (Frontend) ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à
üöÄ Step 2: Frontend Token ‡§ï‡•ã LocalStorage ‡§Æ‡•á‡§Ç Save ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
‡§Ö‡§¨ Login ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶, React App ‡§Æ‡•á‡§Ç ‡§π‡§Æ ‡§á‡§∏ Token ‡§ï‡•ã LocalStorage ‡§Æ‡•á‡§Ç Save ‡§ï‡§∞ ‡§≤‡•á‡§§‡•á ‡§π‡•à‡§Ç:
üîπ ‡§Ö‡§¨ ‡§Ø‡§π Token ‡§π‡§∞ API Request ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ ‡§§‡§æ‡§ï‡§ø Backend ‡§ï‡•ã ‡§™‡§§‡§æ ‡§ö‡§≤‡•á ‡§ï‡§ø ‡§Ø‡§π Authorized User ‡§π‡•à‡•§
üöÄ Step 3: ‡§ú‡§¨ User API Call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§§‡•ã Token Send ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
‡§Ö‡§¨ ‡§ú‡§¨ User ‡§ï‡§ø‡§∏‡•Ä Secure API ‡§ï‡•ã Call ‡§ï‡§∞‡•á‡§ó‡§æ, ‡§§‡•ã ‡§â‡§∏‡•á Header ‡§Æ‡•á‡§Ç Authorization Token ‡§≠‡•á‡§ú‡§®‡§æ ‡§™‡§°‡§º‡•á‡§ó‡§æ:
‚úî ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•Å‡§Ü?
Request ‡§≠‡•á‡§ú‡§§‡•á ‡§∏‡§Æ‡§Ø Token Header ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ
‡§Ö‡§¨ Backend ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ï‡§ø ‡§Ø‡§π Valid Token ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
üöÄ Step 4: Backend Token ‡§ï‡•ã Verify ‡§ï‡§∞‡•á‡§ó‡§æ
‡§Ö‡§¨ Backend ‡§Æ‡•á‡§Ç Middleware (authMiddleware.js) ‡§Ø‡§π Verify ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ï‡§ø Token ‡§∏‡§π‡•Ä ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç:
‚úî ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•Å‡§Ü?

Token Header ‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ
‡§Ö‡§ó‡§∞ Token ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‚Üí 401 Unauthorized Error ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ
Token ‡§ï‡•ã Verify ‡§ï‡§ø‡§Ø‡§æ
‡§Ö‡§ó‡§∞ ‡§∏‡§π‡•Ä ‡§π‡•à, ‡§§‡•ã User ‡§ï‡•Ä ID ‡§ï‡•ã Request ‡§Æ‡•á‡§Ç Set ‡§ï‡§ø‡§Ø‡§æ ‡§î‡§∞ API ‡§ï‡•ã ‡§Ü‡§ó‡•á ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ

üîπ Authorization ‡§∏‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§´‡§º‡§æ‡§Ø‡§¶‡§æ ‡§π‡•à?
‚úÖ Secure API Calls ‚Äì ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§Ö‡§®‡§ú‡§æ‡§® ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø Data Access ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ
‚úÖ Role-Based Access ‚Äì Admin ‡§î‡§∞ User ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó ‡§ö‡•Ä‡§ú‡§º‡•á‡§Ç ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
‚úÖ Token-Based System ‚Äì User ‡§ï‡•ã ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ Login ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§™‡§°‡§º‡§§‡•Ä


step 6.logout api route create karna
1.logout route ke under hum cookie ko clear kar denge jisme hum httpOnly ,secure or sameSite attribute use karenge


setp 7.agar user model ka schema hum dekhe to yaha per koi object nahi banaya jis se pata chal sake admin hai ya phir doctor hai.
1.user model ke under hum admin or doctor ka object banayenge jisse pata chal sake jis ne login kiya wo admin hai ya doctor hai
2.hum ne isAdmin , isDoctor , notification or seennotification ka object banaya hai
3.database ke under jitne existing user hai unko delete kar denge.
4.admin ke naam se new register karenge. or new user bhi register karenge kyu ki dono seprate menu frontend me show karne hai.
5.get user api hai uske user.password ko undefiend karenge kyu ki humko frontend me  user ka password show  nahi karna hai.

